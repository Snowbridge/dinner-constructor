package ru.practicum.dinner.cli;

import ru.practicum.dinner.components.MealsRepository;
import ru.practicum.dinner.dto.Meal;
import ru.practicum.dinner.dto.MealType;
import ru.practicum.dinner.services.Converter;
import ru.practicum.dinner.services.DefaultMenuGenerator;
import ru.practicum.dinner.services.DinnerConstructor;

import java.util.Set;

public class MainMenu extends AbstractReplRunner {
    private final MealsRepository mealsRepository;
    private final DinnerConstructor dinnerConstructor;

    public MainMenu() {
        super(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                new String[]{
                        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ",
                        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥",
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–ª—é–¥",
                        "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥"
                }
        );
        mealsRepository = MealsRepository.getInstance();
        dinnerConstructor = DinnerConstructor.getInstance();
    }


    @Override
    void processCommand(int command) {
        switch (command) {
            case 1:
                addNewMeal();
                break;
            case 2:
                listMeals();
                break;
            case 3:
                generateSets();
                break;
            case 4:
                DefaultMenuGenerator.getInstance().generate();
                break;
        }
    }

    private void generateSets() {
        int amount = queryIntFromStdin("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å");

        Set<MealType> availableMealTypes = mealsRepository.getAvailableMealTypes();
        String numberedMealTypesString = Converter.mealTypesToNumberedString(availableMealTypes);

        String chosenTypesString = queryStringFromStdin("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é [" + numberedMealTypesString + "]");
        Set<MealType> chosenMealTypes = Converter.commaSeparatedNumbersToMealTypes(availableMealTypes, chosenTypesString);

        dinnerConstructor.generateLunchSets(chosenMealTypes, amount)
                .forEach((lunchSetName, meals) -> {
                    println(lunchSetName);
                    meals.forEach(this::printMeal);
                    int cost = meals.stream().mapToInt(Meal::getPrice).sum();
                    println("\t –°—Ç–æ–∏–º–æ—Å—Ç—å: " + cost);
                });
    }

    private void addNewMeal() {
        String mealTypeName = queryStringFromStdin("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞");
        if (mealTypeName == null || mealTypeName.isEmpty()) {
            throw new IllegalArgumentException("–¢–∏–ø –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        MealType mealType = mealsRepository.getMealTypeByName(mealTypeName);

        String mealName = queryStringFromStdin("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞");
        if (mealName == null || mealName.isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        String mealDescription = queryStringFromStdin("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞");
        int mealPrice = queryIntFromStdin("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞");

        mealsRepository.addMeal(mealType, new Meal(mealName, mealDescription, mealPrice));
    }

    private void listMeals() {
        for (MealType mealType : mealsRepository.getAvailableMealTypes()) {
            println("# " + mealType + ":");
            mealsRepository.getMealsByType(mealType)
                    .forEach(this::printMeal);
        }
    }

    private void printMeal(Meal meal) {
        println(
                String.format(
                        "\t%s\n\t\t%s\n\t\t%d üíé",
                        meal.getName(),
                        meal.getDescription(),
                        meal.getPrice()
                )
        );
    }
}
